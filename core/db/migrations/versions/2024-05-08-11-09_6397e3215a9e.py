"""initialMigration

Revision ID: 6397e3215a9e
Revises: 
Create Date: 2024-05-08 11:09:55.094528

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "6397e3215a9e"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "datatype",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("ru_type", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "files",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("ext", sa.String(), nullable=False),
        sa.Column("byte_size", sa.BIGINT(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "groups",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "modules",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "permissions",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "roles",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("alias", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "source",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("ip_address", sa.String(), nullable=False),
        sa.Column("port", sa.BIGINT(), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("disabled", sa.Boolean(), nullable=False),
        sa.Column("connected", sa.Boolean(), nullable=False),
        sa.Column("protocol", sa.String(), nullable=False),
        sa.Column("path_to_resource", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "uom",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("blockflag", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "users",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("login", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("company_id", sa.Uuid(), nullable=False),
        sa.Column("position", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "group_modules",
        sa.Column(
            "id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("group_id", sa.Uuid(), nullable=False),
        sa.Column("module_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["main.groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["module_id"],
            ["main.modules.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "params",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("uom_id", sa.BIGINT(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("ru_name", sa.String(), nullable=False),
        sa.Column("typedata_id", sa.BIGINT(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("source_id", sa.BIGINT(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["main.source.id"],
        ),
        sa.ForeignKeyConstraint(
            ["typedata_id"],
            ["main.datatype.id"],
        ),
        sa.ForeignKeyConstraint(
            ["uom_id"],
            ["main.uom.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.Uuid(), nullable=False),
        sa.Column("permission_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["main.permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["main.roles.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
        schema="main",
    )
    op.create_table(
        "screens",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("width", sa.BIGINT(), nullable=False),
        sa.Column("height", sa.BIGINT(), nullable=False),
        sa.Column("positionX", sa.BIGINT(), nullable=False),
        sa.Column("positionY", sa.BIGINT(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("image_id", sa.Uuid(), nullable=False),
        sa.Column("parent_id", sa.UUID(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["image_id"],
            ["main.files.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["main.screens.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["main.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="main",
    )
    op.create_table(
        "user_groups",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("group_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["main.groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["main.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
        schema="main",
    )
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column("role_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["main.roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["main.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
        schema="main",
    )
    op.create_table(
        "param_opc",
        sa.Column("param_id", sa.BIGINT(), nullable=False),
        sa.Column("opc_address", sa.String(), nullable=False),
        sa.Column("address_to_write", sa.String(), nullable=True),
        sa.Column("source_id_to_write", sa.BIGINT(), nullable=True),
        sa.Column("source_name_to_write", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "modify_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["param_id"],
            ["main.params.id"],
        ),
        sa.ForeignKeyConstraint(
            ["source_id_to_write"],
            ["main.source.id"],
        ),
        sa.PrimaryKeyConstraint("param_id", "opc_address"),
        schema="main",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("param_opc", schema="main")
    op.drop_table("user_roles", schema="main")
    op.drop_table("user_groups", schema="main")
    op.drop_table("screens", schema="main")
    op.drop_table("role_permissions", schema="main")
    op.drop_table("params", schema="main")
    op.drop_table("group_modules", schema="main")
    op.drop_table("users", schema="main")
    op.drop_table("uom", schema="main")
    op.drop_table("source", schema="main")
    op.drop_table("roles", schema="main")
    op.drop_table("permissions", schema="main")
    op.drop_table("modules", schema="main")
    op.drop_table("groups", schema="main")
    op.drop_table("files", schema="main")
    op.drop_table("datatype", schema="main")
    # ### end Alembic commands ###
